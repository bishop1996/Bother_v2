import * as React from "react"
import { useState, useLayoutEffect, useContext } from "react"
import {
    Frame,
    ControlType,
    addPropertyControls,
    RenderTarget,
    Stack,
    MotionStyle,
} from "framer"
import {
    Subcomponents_Menu_Bar as Menu_Bar,
    Subcomponents_Dock_Divider as Dock_Divider,
    Subcomponents_Tooltip as Tooltip,
    Helpers_DefaultInstructions as DefaultInstructions,
} from "./canvas"
import { Icon } from "./Subcomponents/Icon"
import { useInterval } from "use-interval"
import { useUnsplashAPI } from "./Utils/fetch"
import { urlWithoutDomain } from "./Utils/imageWorkAround"
import { Rnd as DragAndResizable } from "react-rnd"
import {
    LiveDesktopContext,
    AppContext,
    desktopMethods,
} from "./Contexts/Contexts"
import useMethods from "use-methods"

// Optimize certain components
const MemoizedApplication = React.memo(Application)
const MemoizedLiveDock = React.memo(LiveDock)

/* -------------------------------------------------------------------------- */
/*                               Live Desktop                              */
/* -------------------------------------------------------------------------- */

LiveDesktop.defaultProps = {
    width: 1440,
    height: 900,
    wallpaper: "Photo",
    wallpaperColor: "#FFA1D0",
    defaultWallpaper: "macOS",
    macOSWallpaper: "catalina",
    search: "",
    dock: "live",
}

export function LiveDesktop(props) {
    const {
        width: desktopWidth,
        height: desktopHeight,
        wallpaper,
        wallpaperColor,
        search,
        dock,
        defaultWallpaper,
        macOSWallpaper,
        children,
    } = props

    /* ---------------------------- Set up wallpaper ---------------------------- */

    const { imageUrl: wallpaperUrl, isImageLoading } = useUnsplashAPI({
        size: "1200x800",
        search,
    })

    const localWallpaper = urlWithoutDomain({
        filepath: "./images/wallpapers/",
        filename: `${macOSWallpaper}_day.jpg`,
    })
    const WALLPAPER_URL =
        wallpaper === "Photo" && !isImageLoading && defaultWallpaper !== "macOS"
            ? wallpaperUrl
            : localWallpaper
    const WALLPAPER_COLOR = wallpaper === "Color" ? wallpaperColor : "#999CA3"

    /* ------------------------------ Set up Clock ------------------------------ */

    const [time, setTime] = useState("9:40 AM")

    // Reference: https://overreacted.io/making-setinterval-declarative-with-react-hooks/
    useInterval(() => {
        const updateTime = () => {
            const date = new Date()
            setTime(
                date.toLocaleString("en-US", {
                    hour: "numeric",
                    minute: "numeric",
                    hour12: true,
                })
            )
        }
        if (RenderTarget.current() === RenderTarget.preview) {
            updateTime()
        } else {
            return null
        }
    }, 1000)

    /* ------------- Set up connected frames and turn them into apps ------------ */

    const initialApps = React.Children.map(children, (child, index) => {
        const { name, width, height, children: childrenOfChild } = child.props
        const CODE_COMPONENT_CHILD = childrenOfChild[0]
        const CODE_COMPONENT_NAME =
            CODE_COMPONENT_CHILD && CODE_COMPONENT_CHILD.props.name // Grab the name prop if it's a code component
        const appId = "APP_" + child.key
        return {
            child,
            name:
                CODE_COMPONENT_NAME && name
                    ? name
                    : CODE_COMPONENT_NAME
                    ? CODE_COMPONENT_NAME
                    : name
                    ? name
                    : "Untitled App",
            // 😂 Set name based on whether the child is a code component, frame, or design component
            id: appId,
            width,
            height,
            isOpen: true,
            stackIndex: index,
            top: desktopHeight / 32 + (index + 1) * 40,
            left: desktopWidth / 16 + (index + 1) * 32,
        }
    })

    // Manage state of the current set of apps loaded into the LiveDesktop
    const initialState = {
        apps: initialApps,
    }

    // Using use-methods library instead of useReducer for context, state, and state updates
    const [{ apps }, { resetApps, switchToApp, closeAppWindow }] = useMethods(
        desktopMethods,
        initialState
    )

    //Re-render if there are new children connected
    useLayoutEffect(() => {
        resetApps(initialState)
    }, [children])

    const frontApp = apps.slice(-1)[0]
    const frontAppName = apps.length > 0 && frontApp ? frontApp.name : "macOS"

    /* ----------------------------- Event Handlers ----------------------------- */

    const handleSwitchToApp = id => {
        switchToApp(id)
    }

    const handleCloseAppWindow = id => {
        closeAppWindow(id)
    }
    /* -------------------------------- Rendering ------------------------------- */

    return (
        <LiveDesktopContext.Provider value={{ switchToApp, frontApp }}>
            <Frame name="Live Desktop Wrapper" size="100%" overflow="hidden">
                <Frame
                    name="Wallpaper"
                    size="100%"
                    style={
                        wallpaper === "Color"
                            ? backgroundStyle(WALLPAPER_COLOR, null)
                            : backgroundStyle(null, WALLPAPER_URL)
                    }
                >
                    <Frame
                        name="Desktop Apps"
                        width={"100%"}
                        top={22}
                        height={"calc(100% - 22px)"}
                        background={"transparent"}
                    >
                        {apps.length > 0
                            ? apps.map(app => {
                                  const {
                                      child,
                                      name,
                                      id,
                                      width,
                                      height,
                                      isOpen,
                                      top,
                                      left,
                                      stackIndex,
                                  } = app
                                  return (
                                      <MemoizedApplication
                                          key={"KEY_" + id}
                                          child={child}
                                          name={name}
                                          id={id}
                                          width={width}
                                          height={height}
                                          isOpen={isOpen}
                                          isActive={frontApp.id === id}
                                          top={top}
                                          left={left}
                                          stackIndex={stackIndex}
                                          className={"draggable"}
                                          onCloseButton={() =>
                                              handleCloseAppWindow(id)
                                          }
                                          onMouseDown={() =>
                                              handleSwitchToApp(id)
                                          }
                                      />
                                  )
                              })
                            : null}
                        {apps.length === 0 &&
                        RenderTarget.current() === RenderTarget.canvas ? (
                            <DefaultInstructions
                                Message={
                                    "Connect frames to show them as interactive app windows\n\n(⚠️ Experimental)"
                                } // FIXME: Remove my warning when this component is stable
                                width="33%"
                                height="50%"
                                center="y"
                                right={24}
                                radius={8}
                            />
                        ) : null}
                    </Frame>
                    <Menu_Bar width={"100%"} Time={time} App={frontAppName} />
                    {dock === "hide" ? null : dock === "live" ? (
                        <MemoizedLiveDock apps={initialApps} />
                    ) : (
                        <StaticDock
                            appNames={["Finder", "Mail", "Safari", "Calendar"]}
                        />
                    )}
                </Frame>
            </Frame>
        </LiveDesktopContext.Provider>
    )
}

const backgroundStyle = (color, imageUrl): MotionStyle => {
    return {
        position: "relative",
        height: "100%",
        width: "100%",
        backgroundColor: color,
        backgroundImage: `url(${imageUrl})`,
        backgroundPosition: "center",
        backgroundSize: "cover",
    }
}

addPropertyControls(LiveDesktop, {
    wallpaper: {
        type: ControlType.SegmentedEnum,
        title: "Wallpaper",
        options: ["Photo", "Color"],
    },
    defaultWallpaper: {
        type: ControlType.SegmentedEnum,
        title: "Image",
        options: ["macOS", "Random"],
        hidden(props) {
            return props.wallpaper !== "Photo"
        },
    },
    macOSWallpaper: {
        type: ControlType.Enum,
        title: "↳ Choose",
        options: ["mojave", "catalina"],
        optionTitles: ["Mojave", "Catalina"],
        hidden(props) {
            return (
                props.wallpaper !== "Photo" ||
                props.defaultWallpaper !== "macOS"
            )
        },
    },
    search: {
        type: ControlType.String,
        title: "↳ Search",
        placeholder: "Search Unsplash",
        hidden(props) {
            return (
                props.wallpaper !== "Photo" ||
                props.defaultWallpaper !== "Random"
            )
        },
    },
    wallpaperColor: {
        type: ControlType.Color,
        title: "↳ Color",
        hidden(props) {
            return props.wallpaper !== "Color"
        },
    },
    dock: {
        type: ControlType.SegmentedEnum,
        options: ["live", "static", "hide"],
        optionTitles: ["Live", "Static", "Hide"],
        title: "Dock",
    },
    children: {
        type: ControlType.Array,
        title: "Apps",
        propertyControl: {
            type: ControlType.ComponentInstance,
        },
    },
})

/* -------------------------------------------------------------------------- */
/*                                 Application                                */
/* -------------------------------------------------------------------------- */

Application.defaultProps = {
    width: 800,
    height: 540,
    top: 0,
    left: 0,
    name: "Untitled App",
    isActive: true,
}

function Application({
    width,
    height,
    top,
    left,
    child,
    id,
    name,
    isOpen,
    isActive,
    stackIndex,
    onMouseDown,
    onCloseButton,
    ...rest
}) {
    /* ----------------------------- Event Handlers ----------------------------- */

    const handleMouseDown = event => {
        event.preventDefault()
        event.stopPropagation()
        onMouseDown && onMouseDown(id)
    }

    /* --------------------------------- Render --------------------------------- */

    return (
        <AppContext.Provider value={{ id, onCloseButton, isActive }}>
            <DragAndResizable
                {...rest}
                default={{
                    x: left,
                    y: top,
                    width: width,
                    height: height,
                }}
                enableUserSelectHack={true}
                minWidth={200}
                minHeight={200}
                bounds={"parent"}
                style={applicationStyle(isOpen, stackIndex)}
                onMouseDown={handleMouseDown}
                resizeHandleStyles={resizeHandleStyles}
                dragHandleClassName={"draggable"}
            >
                {child &&
                    React.cloneElement(child, {
                        width: "100%",
                        height: "100%",
                    })}
            </DragAndResizable>
        </AppContext.Provider>
    )
}

const applicationStyle = (isOpen, stackIndex): React.CSSProperties => {
    return {
        boxShadow:
            "0px 0px 20px 0px rgba(0, 0, 0, 0.15), 0px 25px 30px 0px hsla(0, 0%, 0%, 0.35)",
        overflow: "hidden",
        borderRadius: 4,
        visibility: isOpen ? "visible" : "hidden",
        zIndex: stackIndex,
    }
}

const resizeHandleStyles = {
    bottom: { cursor: "ns-resize" },
    top: { cursor: "ns-resize" },
    left: { cursor: "ew-resize" },
    right: { cursor: "ew-resize" },
    topRight: { cursor: "nesw-resize" },
    topLeft: { cursor: "nwse-resize" },
    bottomRight: { cursor: "nwse-resize" },
    bottomLeft: { cursor: "nesw-resize" },
}

addPropertyControls(Application, {
    children: {
        type: ControlType.ComponentInstance,
    },
})

/* -------------------------------------------------------------------------- */
/*                                Live Dock                                */
/* -------------------------------------------------------------------------- */

function LiveDock({ apps }) {
    const { switchToApp } = useContext(LiveDesktopContext)
    const [tooltip, setTooltip] = useState({
        visible: false,
        name: "",
        positionX: 0,
    })

    const SPACING = 8
    const ICON_SIZE = 48
    const TOOL_TIP_WIDTH = 120

    /* ----------------------------- Event handlers ----------------------------- */

    const handleAppIconTap = targetId => {
        switchToApp(targetId)
    }

    const handleAppIconMouseOver = React.useCallback(
        (targetId, targetName) => {
            const targetIndex = apps.findIndex(app => app.id === targetId)
            setTooltip({
                visible: true,
                name: targetName,
                positionX:
                    targetIndex * (ICON_SIZE + SPACING) +
                    (ICON_SIZE + SPACING) / 2 -
                    TOOL_TIP_WIDTH / 2,
            })
        },
        [apps]
    )

    const handleAppIconMouseOut = React.useCallback(() => {
        setTooltip({
            ...tooltip,
            visible: false,
        })
    }, [apps])

    const handleAppIconWhileTap = React.useCallback(() => {
        return {
            opacity: 0.3,
            transition: { duration: 0 },
        }
    }, [apps])

    /* --------------------------------- Helpers -------------------------------- */

    const getAppIcon = app => {
        const { id, name = "Untitled App", child } = app
        const iconProps = {
            onTap: () => handleAppIconTap(id),
            //@ts-ignore
            whileTap: () => handleAppIconWhileTap(),
            onMouseOver: () => handleAppIconMouseOver(id, name),
            onMouseOut: () => handleAppIconMouseOut(),
            id,
            key: id,
            center: false,
            width: ICON_SIZE,
            height: ICON_SIZE,
            size: ICON_SIZE,
            top: 0,
            left: 0,
            name,
        }

        const customIcon =
            child.props.children &&
            child.props.children.find(frame => frame.props.name === "App Icon")

        const supportedAppNames = [
            "Finder",
            "Messages",
            "Chrome",
            "Safari",
            "Slack",
            "Dropbox",
            "Settings",
            "Photos",
            "App Store",
            "Facetime",
            "Notes",
            "Calendar",
            "Maps",
            "Sketch",
            "Mail",
            "Preview",
            "Keynote",
            "Quicktime",
            "Framer X",
        ]

        if (supportedAppNames.find(appName => appName === name)) {
            return (
                <Icon imageFileName={makeImageFileName(name)} {...iconProps} />
            )
        } else {
            return customIcon ? (
                React.cloneElement(customIcon, {
                    ...iconProps,
                    visible: true,
                })
            ) : (
                <Icon
                    imageFileName={makeImageFileName("Generic")}
                    {...iconProps}
                />
            )
        }
    }
    const appIcons = React.useMemo(
        () =>
            apps.map(app => (
                <Frame
                    name={"Icon Wrapper"}
                    background="transparent"
                    size={ICON_SIZE}
                    key={app.id}
                >
                    {getAppIcon(app)}
                    <Frame
                        name={"Active App Indicator"}
                        size={4}
                        background="black"
                        radius={10}
                        center="x"
                        bottom={-4}
                    />
                </Frame>
            )),
        [apps]
    )

    const tooltipStyle = () => {
        return {
            width: TOOL_TIP_WIDTH,
            position: "absolute",
            top: -ICON_SIZE,
            left: tooltip.positionX,
            zIndex: "1001",
            visibility: tooltip.visible ? "visible" : "hidden",
        }
    }

    /* --------------------------------- Render --------------------------------- */

    return (
        <Stack
            style={dockStyle}
            height={60}
            width={"auto"}
            padding={8}
            gap={8}
            direction={"horizontal"}
            alignment={"center"}
            distribution={"start"}
            bottom={0}
            center={"x"}
            z={1000}
            backgroundColor={"rgba(224, 224, 224, 0.6)"}
        >
            {appIcons}
            {apps.length > 0 ? <Dock_Divider /> : null}
            <Icon
                imageFileName={makeImageFileName("Trash Full")}
                name="Trash"
                left={0}
                top={0}
                size={48}
                width={48}
                height={48}
            />
            <Tooltip Name={tooltip.name} style={tooltipStyle()} />
        </Stack>
    )
}

/* -------------------------------------------------------------------------- */
/*                                 StaticDock                                 */
/* -------------------------------------------------------------------------- */

function StaticDock({ appNames }) {
    return (
        <Stack
            style={dockStyle}
            height={60}
            width={"auto"}
            padding={8}
            gap={8}
            direction={"horizontal"}
            alignment={"center"}
            distribution={"start"}
            bottom={0}
            center={"x"}
            z={1000}
            backgroundColor={"rgba(224, 224, 224, 0.6)"}
        >
            {appNames.map(appName => (
                <Icon
                    imageFileName={makeImageFileName(appName)}
                    name={appName}
                    left={0}
                    top={0}
                    size={48}
                    width={48}
                    height={48}
                />
            ))}
            <Dock_Divider />
            <Icon
                imageFileName={makeImageFileName("Trash Empty")}
                name="Trash"
                left={0}
                top={0}
                size={48}
                width={48}
                height={48}
            />
        </Stack>
    )
}

const dockStyle: MotionStyle = {
    overflow: "none",
    borderRadius: "5px 5px 0 0",
    boxShadow: "0px 1px 5px 0px rgba(0, 0, 0, 0.08)",
    borderStyle: "solid",
    borderColor: "rgba(0, 0, 0, 0.24)",
    borderTopWidth: 0.5,
    borderBottomWidth: 0,
    borderLeftWidth: 0.5,
    borderRightWidth: 0.5,
}

/* -------------------------------------------------------------------------- */
/*                              Helper Functions                              */
/* -------------------------------------------------------------------------- */

const makeImageFileName = appName => `App Icon ${appName}.png`
