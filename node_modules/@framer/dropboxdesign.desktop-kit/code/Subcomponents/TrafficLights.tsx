import * as React from "react"
import { useState, useContext } from "react"
import { ControlType, Frame, Stack, addPropertyControls } from "framer"
import { AppContext, LiveDesktopContext } from "../Contexts/Contexts"

/* -------------------------------------------------------------------------- */
/*                                TrafficLights                               */
/* -------------------------------------------------------------------------- */

TrafficLights.defaultProps = {
    enabled: true,
    width: 52,
    height: 12,
    options: "default",
}

export function TrafficLights(props) {
    const { enabled, options, ...rest } = props
    const [hover, setHover] = useState(false)
    const { isActive } = useContext(AppContext)

    const getLightOptions = () => {
        switch (options) {
            case "close":
                return (
                    <>
                        <TrafficLight type={"red"} hover={hover} />
                        <TrafficLight />
                        <TrafficLight />
                    </>
                )
            case "closeAndZoom":
                return (
                    <>
                        <TrafficLight type={"red"} hover={hover} />
                        <TrafficLight />
                        <TrafficLight type={"green"} hover={hover} />
                    </>
                )
            default:
                return (
                    <>
                        <TrafficLight type={"red"} hover={hover} />
                        <TrafficLight type={"yellow"} hover={hover} />
                        <TrafficLight type={"green"} hover={hover} />
                    </>
                )
        }
    }

    /* ----------------------------- Event handlers ----------------------------- */

    const handleHoverStart = e => {
        setHover(true)
    }
    const handleHoverEnd = e => {
        setHover(false)
    }

    return (
        <Frame
            {...rest}
            onHoverStart={handleHoverStart}
            onHoverEnd={handleHoverEnd}
            background="transparent"
        >
            <Stack size="100%" direction="horizontal" gap={8}>
                {(isActive && enabled) || hover ? (
                    getLightOptions()
                ) : (
                    <>
                        <TrafficLight />
                        <TrafficLight />
                        <TrafficLight />
                    </>
                )}
            </Stack>
        </Frame>
    )
}

addPropertyControls(TrafficLights, {
    enabled: {
        type: ControlType.Boolean,
        title: "Enabled",
        enabledTitle: "On",
        disabledTitle: "Off",
    },
    options: {
        type: ControlType.Enum,
        title: "â†³ Options",
        options: ["default", "close", "closeAndZoom"],
        optionTitles: ["Default", "Close Only", "Close & Zoom"],
        hidden(props) {
            return props.enabled !== true
        },
    },
})

/* -------------------------------------------------------------------------- */
/*                                TrafficLight                                */
/* -------------------------------------------------------------------------- */

function TrafficLight(props) {
    const { type, hover } = props
    const { id: appId, onCloseButton } = useContext(AppContext)
    const lightProps = {
        width: 12,
        height: 12,
        backgroundColor: "#d0d0d0",
        borderRadius: "50%",
        border: "0.5px solid rgba(33, 33, 33, 0.15)",
        style: { overflow: "visible" },
    }

    /* ---------------------------------- Base ---------------------------------- */

    const redProps = {
        ...lightProps,
        backgroundColor: "#ff5f57",
    }
    const yellowProps = {
        ...lightProps,
        backgroundColor: "#ffbd2d",
    }
    const greenProps = {
        ...lightProps,
        backgroundColor: "#28c940",
    }

    /* ------------------------------- Hover icons ------------------------------ */

    const iconProps = {
        left: "1.5px",
        top: "-1.5px",
        height: 12,
        width: 12,
        background: "transparent",
    }

    const closeIcon = (
        <svg xmlns="http://www.w3.org/2000/svg" width="8" height="8">
            <path
                d="M 1.75 1.75 L 6.25 6.25"
                fill="transparent"
                stroke="rgba(77, 1, 0, 1.00)"
                strokeLinecap="square"
            ></path>
            <path
                d="M 6.25 1.75 L 1.75 6.25"
                fill="transparent"
                stroke="rgba(77, 1, 0, 1.00)"
                strokeLinecap="square"
            ></path>
        </svg>
    )

    const minimizeIcon = (
        <svg xmlns="http://www.w3.org/2000/svg" width="8" height="8">
            <path
                d="M 0.5 4 L 8 4"
                fill="transparent"
                stroke="rgba(77, 1, 0, .65)"
                strokeLinecap="square"
            ></path>
        </svg>
    )

    const fullscreenIcon = (
        <svg xmlns="http://www.w3.org/2000/svg" width="8" height="8">
            <path
                d="M 2.2 1 L 7 1 L 7 5.8 Z"
                fill="rgba(3, 99, 2, 1.00)"
            ></path>
            <path
                d="M 5.8 7 L 1 7 L 1 2.2 Z"
                fill="rgba(3, 99, 0, 1.00)"
            ></path>
        </svg>
    )

    const handleCloseButton = () => {
        appId && onCloseButton && onCloseButton(appId)
    }

    /* --------------------------------- Render --------------------------------- */

    switch (type) {
        case "red":
            return (
                <Frame {...redProps} onTap={handleCloseButton}>
                    {hover ? <Frame {...iconProps}>{closeIcon}</Frame> : null}
                </Frame>
            )
        case "yellow":
            return (
                <Frame {...yellowProps}>
                    {hover ? (
                        <Frame {...iconProps}>{minimizeIcon}</Frame>
                    ) : null}
                </Frame>
            )
        case "green":
            return (
                <Frame {...greenProps}>
                    {hover ? (
                        <Frame {...iconProps}>{fullscreenIcon}</Frame>
                    ) : null}
                </Frame>
            )

        default:
            return <Frame {...lightProps}></Frame>
    }
}
